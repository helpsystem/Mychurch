version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mychurch-postgres
    environment:
      POSTGRES_DB: mychurch
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mychurch_dev_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db/init:/docker-entrypoint-initdb.d
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - mychurch-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d mychurch"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: mychurch-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mychurch-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: mychurch-backend
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 5000
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-mychurch_dev_password}@postgres:5432/mychurch
      REDIS_URL: redis://redis:6379
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_KEY: ${SUPABASE_KEY}
      FTP_HOST: ${FTP_HOST}
      FTP_USER: ${FTP_USER}
      FTP_PASS: ${FTP_PASS}
      DOMAIN: ${DOMAIN:-localhost}
    volumes:
      - ./backend:/app
      - ./attached_assets:/app/attached_assets
      - ./logs:/app/logs
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mychurch-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend (Development)
  frontend-dev:
    build:
      context: .
      dockerfile: Dockerfile.frontend.dev
    container_name: mychurch-frontend-dev
    ports:
      - "5173:5173"
    environment:
      VITE_API_BASE: http://localhost:5000/api
    volumes:
      - .:/app
      - /app/node_modules
      - /app/dist
    depends_on:
      - backend
    networks:
      - mychurch-network
    profiles:
      - development

  # Nginx (Production)
  nginx:
    image: nginx:alpine
    container_name: mychurch-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./dist:/usr/share/nginx/html
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/ssl:/etc/nginx/ssl
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - backend
    networks:
      - mychurch-network
    profiles:
      - production
    restart: unless-stopped

  # Let's Encrypt SSL
  certbot:
    image: certbot/certbot
    container_name: mychurch-certbot
    volumes:
      - ./docker/ssl:/etc/letsencrypt
      - ./dist:/usr/share/nginx/html
    command: certonly --webroot --webroot-path=/usr/share/nginx/html --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN}
    profiles:
      - ssl
    networks:
      - mychurch-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: mychurch-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - mychurch-network
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: mychurch-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - mychurch-network
    profiles:
      - monitoring

  # Log Management - Loki
  loki:
    image: grafana/loki:latest
    container_name: mychurch-loki
    ports:
      - "3100:3100"
    volumes:
      - ./docker/monitoring/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/tmp/loki
    networks:
      - mychurch-network
    profiles:
      - monitoring

  # Database Backup Service
  db-backup:
    image: postgres:15-alpine
    container_name: mychurch-backup
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:-mychurch_dev_password}
    volumes:
      - ./backups:/backups
      - ./scripts/backup:/scripts
    command: >
      sh -c "
        while true; do
          echo 'Starting backup at $(date)'
          pg_dump -h postgres -U postgres -d mychurch > /backups/backup_$(date +%Y%m%d_%H%M%S).sql
          find /backups -name '*.sql' -mtime +7 -delete
          echo 'Backup completed at $(date)'
          sleep 86400
        done
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mychurch-network
    profiles:
      - backup

  # Health Monitor
  healthcheck:
    build:
      context: .
      dockerfile: docker/health/Dockerfile
    container_name: mychurch-health
    environment:
      SERVICES: postgres,redis,backend,nginx
      CHECK_INTERVAL: 60
      ALERT_WEBHOOK: ${ALERT_WEBHOOK:-}
    volumes:
      - ./logs/health:/logs
    depends_on:
      - backend
      - postgres
      - redis
    networks:
      - mychurch-network
    profiles:
      - monitoring
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  mychurch-network:
    driver: bridge